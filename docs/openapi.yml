openapi: 3.0.3
info:
  title: API REST Sécurisée - Catalogue de Produits
  version: "1.0.0"
  description: >
    API REST sécurisée développée avec Spring Boot. 
    Elle gère l'authentification via JWT, l'inscription, et la gestion d'un catalogue de produits.
servers:
  - url: http://localhost:8080
    description: Serveur de développement

paths:
  /api/auth/login:
    post:
      summary: Authentification d'un utilisateur
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentification réussie, retourne un token JWT.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: Le token JWT.
                  tokenType:
                    type: string
                    description: Le type de token (Bearer).
        '401':
          description: Authentification échouée.
        '500':
          description: Erreur interne du serveur.

  /api/auth/register:
    post:
      summary: Inscription d'un nouvel utilisateur
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Inscription réussie, retourne l'utilisateur créé.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requête invalide (utilisateur ou email déjà existant).
        '500':
          description: Erreur interne du serveur.

  /api/auth/me:
    get:
      summary: Récupérer les informations de l'utilisateur connecté
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Informations de l'utilisateur connecté.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé.
        '404':
          description: Utilisateur non trouvé.

  /api/products:
    get:
      summary: Récupérer la liste des produits
      tags:
        - Products
      responses:
        '200':
          description: Liste des produits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Non autorisé.
    post:
      summary: Créer un nouveau produit
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Produit créé.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Requête invalide.
        '401':
          description: Non autorisé.

  /api/products/{id}:
    get:
      summary: Récupérer un produit par son ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Détails du produit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Produit non trouvé.
        '401':
          description: Non autorisé.
    put:
      summary: Mettre à jour un produit existant
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Produit mis à jour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Requête invalide.
        '404':
          description: Produit non trouvé.
        '401':
          description: Non autorisé.
    delete:
      summary: Supprimer un produit par son ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Produit supprimé avec succès.
        '404':
          description: Produit non trouvé.
        '401':
          description: Non autorisé.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - firstName
        - lastName
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
